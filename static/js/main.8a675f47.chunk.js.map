{"version":3,"sources":["components/GeoJsonComponent.jsx","components/Map.jsx","App.js","serviceWorker.js","index.js"],"names":["GeoJsonComponent","props","GeoJSON","onEachFeature","features","layer","popupContent","length","properties","lugar","bindPopup","on","mouseover","e","openPopup","mouseout","closePopup","defaultProps","styles","wrapper","height","width","margin","display","map","flex","geojsonMarkerOptions2017","radius","fillColor","color","weight","opacity","fillOpacity","pointToLayer2017","feature","latlng","L","circleMarker","Moves","style","Map","center","zoom","TileLayer","url","data","places2017","pointToLayer","useStyles","makeStyles","theme","root","paper","padding","spacing","textAlign","palette","text","secondary","paper_header","alerta","marginTop","fontWeight","Boolean","window","location","hostname","match","ReactDOM","render","classes","className","Grid","container","item","xs","sm","md","lg","xl","Paper","backgroundColor","severity","elevation","variant","fontSize","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8a675f47.chunk.js","sourcesContent":["import React from 'react';\nimport { GeoJSON } from 'react-leaflet';\n\nexport default function GeoJsonComponent(props) {\n    const handleOnEachFeature = (features, layer) => {\n      let popupContent = \"\";\n      if (props.popupContent.length) popupContent = features.properties.lugar;\n      else if (features.properties && features.properties.popupContent) {\n        popupContent = features.properties.popupContent;\n      }\n  \n      layer.bindPopup(popupContent);\n      layer.on({\n        mouseover: e => {\n          layer.openPopup();\n        },\n        mouseout: e => {\n          layer.closePopup();\n        }\n      });\n    };\n    return <GeoJSON {...props} onEachFeature={handleOnEachFeature} />\n}\n\nGeoJsonComponent.defaultProps = {\n    popupContent: '',\n}","import React from 'react';\nimport { Map, TileLayer } from 'react-leaflet';\nimport L from 'leaflet';\nimport GeoJsonComponent from '../components/GeoJsonComponent';\nimport places2017 from '../data/data.json';\n\nconst styles = {\n  wrapper: {\n    height: '100%',\n    width: '100%',\n    margin: '0 auto',\n    display: 'flex'\n  },\n  map: {\n    flex: 1\n  }\n};\n\nconst geojsonMarkerOptions2017 = {\n  radius: 4,\n  fillColor: \"#EE4266\",\n  color: \"#EE4266\",\n  weight: 5,\n  opacity: 1,\n  fillOpacity: 0.4\n};\n\nconst geojsonMarkerOptions2018 = {\n  radius: 4,\n  fillColor: \"#6E3BFB\",\n  color: \"#000\",\n  weight: 2,\n  opacity: 1,\n  fillOpacity: 0.4\n};\n\nconst pointToLayer2017 = (feature, latlng) => {\n  return L.circleMarker(latlng, geojsonMarkerOptions2017);\n}\n\nconst pointToLayer2018 = (feature, latlng) => {\n  return L.circleMarker(latlng, geojsonMarkerOptions2018);\n}\n\nconst Moves = props => {\n  return (\n    <div style={styles.wrapper}>\n      <Map style={styles.map} center={props.center} zoom={props.zoom}>\n        <TileLayer url={props.url} />\n        <GeoJsonComponent\n          popupContent={\"Un contenido\"}\n          data={places2017}\n          pointToLayer={pointToLayer2017}\n        />\n      </Map>\n    </div>\n  );\n}\n\nMoves.defaultProps = {\n  center: [-38.4160957, -63.6166725],\n  zoom: 4,\n  url: 'https://tiles.stadiamaps.com/tiles/alidade_smooth_dark/{z}/{x}/{y}{r}.png'\n};\n\nexport default Moves;","import React, { Component, Fragment } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport MuiAlert from '@material-ui/lab/Alert';\n\nimport Moves from './components/Map'\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    width: '100%',\n    height: '100%'\n  },\n  paper: {\n    padding: theme.spacing(2),\n    textAlign: 'center',\n    color: theme.palette.text.secondary,\n  },\n  paper_header: {\n    padding: theme.spacing(2),\n    //textAlign: 'center',\n    color: theme.palette.text.secondary,\n  },\n  alerta: {\n    marginTop: theme.spacing(2),\n    color: \"#fff\", \n    fontWeight: 500\n  }\n}));\n\nexport default function App() {\n    const classes = useStyles();\n    return (\n      <div className={classes.root}>\n        <Grid container spacing={2}>\n          <Grid item xs={12} sm={6} md={6} lg={6} xl={6}>\n            <Paper className={classes.paper} style={{backgroundColor: \"#222\", color: \"#fff\"}}>\n              <h1>CORONAVIRUS ARGENTINA</h1>\n            </Paper>\n          </Grid>\n          <Grid item xs={12} sm={6} md={6} lg={6} xl={6}>\n            <MuiAlert severity=\"error\" elevation={6} variant=\"filled\">\n              LA OMS DECLARÓ EL CORONAVIRUS COMO PANDEMIA\n            </MuiAlert>\n            <MuiAlert severity=\"info\" elevation={6} variant=\"filled\" className={classes.alerta}>\n              El Presidente finalmente establecerá por DNU la cuarentena obligatoria por el coronavirus\n            </MuiAlert>\n          </Grid>\n          <Grid item xs={12} sm={4} md={4} lg={4} xl={4}>\n            {/* ----- */}\n            <Grid container spacing={2}>\n              <Grid item xs={12} sm={12} md={12} lg={12} xl={12}>\n                <Paper className={classes.paper} style={{fontSize: \"1.2em\", backgroundColor: \"#222\", color: \"rgb(112, 168, 0)\"}}>\n                  <h2>CONFIRMADOS <br></br> 21</h2>\n                </Paper>\n              </Grid>\n              <Grid item xs={12} sm={12} md={12} lg={12} xl={12}>\n                <Paper className={classes.paper} style={{fontSize: \"1.2em\", backgroundColor: \"#222\", color: \"rgb(230, 0, 0)\", fontWeight: \"bold\"}}>\n                  <h2>FALLECIDOS <br></br> 1</h2>\n                </Paper>\n              </Grid>\n              <Grid item xs={12} sm={12} md={12} lg={12} xl={12}>\n                <Paper className={classes.paper} style={{backgroundColor: \"#222\", color: \"rgb(112, 168, 0)\"}}>\n                  <h2>SANADOS <br></br> 0</h2>\n                </Paper>\n              </Grid>\n              <Grid item xs={12} sm={12} md={12} lg={12} xl={12}>\n                <Paper className={classes.paper} style={{fontSize: \"1.06em\", backgroundColor: \"#222\", color: \"rgb(230, 0, 0)\", fontWeight: \"bold\"}}>\n                  <h2>TOTAL MUNDO <br></br> 125.862</h2>\n                </Paper>\n              </Grid>\n            </Grid>\n            {/* ----- */}\n          </Grid>\n          <Grid item xs={12} sm={8} md={8} lg={8} xl={8}>\n            <Moves />\n          </Grid>\n        </Grid>\n      </div>\n    );\n }\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}